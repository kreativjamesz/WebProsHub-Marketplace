// This is your Prisma schema file for WebProsHubMarketplace
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Seed configuration
/// @seed = "tsx prisma/seed.ts"

// User Management - Core user accounts with role-based access control
model User {
  id        String   @id @default(cuid())                    // Unique identifier for each user
  email     String   @unique                                 // User's email address (unique across system)
  password  String                                           // Hashed password for authentication
  name      String                                           // User's full name
  role      UserRole @default(BUYER)                         // User's role: BUYER, SELLER, ADMIN, or STAFF
  phone     String?                                          // Optional phone number
  avatar    String?                                          // Optional profile picture URL
  isActive  Boolean  @default(true)                          // Whether user account is active
  createdAt DateTime @default(now())                         // When user account was created
  updatedAt DateTime @updatedAt                              // When user account was last updated

  // Relations - One-to-one relationships with profile models
  buyerProfile  BuyerProfile?                                // Buyer-specific profile (if role is BUYER)
  sellerProfile SellerProfile?                               // Seller-specific profile (if role is SELLER)
  adminProfile  AdminProfile?                                // Admin-specific profile (if role is ADMIN)
  staffProfile  StaffProfile?                                // Staff-specific profile (if role is STAFF)
  
  // Relations - One-to-many relationships
  orders        Order[]                                       // All orders placed by this user
  reviews       Review[]                                      // All product reviews written by this user
  addresses     Address[]                                     // All shipping/billing addresses for this user
  notifications Notification[]                                 // All notifications sent to this user
  storeMemberships StoreMember[]                              // All store memberships (co-ownership roles)

  @@map("users")                                             // Database table name
}

// User roles for access control and permissions
enum UserRole {
  BUYER                                                      // Can browse, purchase, review products
  SELLER                                                      // Can sell products, manage stores
  ADMIN                                                       // Full system access, manage users/sellers
  STAFF                                                       // Limited admin access, support users
}

// Buyer Profile - Extended information for customers
model BuyerProfile {
  id          String    @id @default(cuid())                 // Unique identifier for buyer profile
  userId      String    @unique                              // Links to User model (one-to-one)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  birthDate   DateTime?                                       // Optional birth date for age verification
  preferences Json?                                           // Shopping preferences, favorite categories
  createdAt   DateTime  @default(now())                      // When profile was created
  updatedAt   DateTime  @updatedAt                           // When profile was last updated

  // Relations - One-to-many relationships
  wishlist WishlistItem[]                                     // Products saved to wishlist
  cart     CartItem[]                                         // Items in shopping cart

  @@map("buyer_profiles")                                    // Database table name
}

// Store Theme - Customizable store appearance
model StoreTheme {
  id          String   @id @default(cuid())                  // Unique identifier for theme
  name        String                                          // Theme name (e.g., "Modern", "Classic")
  description String?                                         // Theme description
  preview     String?                                         // Preview image URL
  css         String                                          // Custom CSS styles for theme
  isActive    Boolean  @default(true)                         // Whether theme is available for use
  createdAt   DateTime @default(now())                        // When theme was created
  updatedAt   DateTime @updatedAt                             // When theme was last updated

  // Relations - One-to-many relationships
  sellers SellerProfile[]                                     // All sellers using this theme

  @@map("store_themes")                                      // Database table name
}

// Store Location - Physical store locations with co-ownership support
model Store {
  id           String        @id @default(cuid())            // Unique identifier for store
  name         String                                        // Store name
  description  String?                                       // Store description
  address      String                                        // Street address
  city         String                                        // City
  state        String                                        // State/province
  country      String                                        // Country
  postalCode   String                                        // ZIP/postal code
  latitude     Float                                         // GPS latitude for map display
  longitude    Float                                         // GPS longitude for map display
  phone        String?                                       // Store phone number
  email        String?                                       // Store email address
  website      String?                                       // Store website URL
  openingHours Json?                                         // Store operating hours (JSON format)
  isActive     Boolean       @default(false)                 // Whether store is active (admin approval required)
  isVerified   Boolean       @default(false)                 // Whether store is verified by admin
  createdAt    DateTime      @default(now())                 // When store was created
  updatedAt    DateTime      @updatedAt                      // When store was last updated

  // Relations - One-to-many relationships
  products     Product[]                                     // All products sold at this store
  storeMembers StoreMember[]                                 // All staff and co-owners of this store
  categories   Category[]                                    // Store-specific product categories
  
  // Relations - Optional relationships
  sellerId     String?                                       // Optional: if store belongs to a specific seller
  seller       SellerProfile? @relation(fields: [sellerId], references: [id])

  @@map("stores")                                            // Database table name
}

// Store Membership - Co-ownership and staff management system
model StoreMember {
  id        String       @id @default(cuid())                // Unique identifier for membership
  storeId   String                                           // Links to Store model
  store     Store        @relation(fields: [storeId], references: [id], onDelete: Cascade)
  userId    String                                           // Links to User model
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  sellerId  String?                                          // Optional: if member is also a seller
  seller    SellerProfile? @relation(fields: [sellerId], references: [id])
  role      StoreRole    @default(STAFF)                     // Member's role in the store
  isActive  Boolean      @default(true)                      // Whether membership is active
  joinedAt  DateTime     @default(now())                     // When member joined the store
  invitedBy String?                                          // User ID who invited this member
  createdAt DateTime     @default(now())                     // When membership was created
  updatedAt DateTime     @updatedAt                          // When membership was last updated

  @@unique([storeId, userId])                                // One user can only have one role per store
  @@map("store_members")                                     // Database table name
}

// Store member roles with different permission levels
enum StoreRole {
  OWNER                                                      // Primary store owner with full control
  CO_OWNER                                                   // Co-owner with full access rights
  MANAGER                                                    // Store manager with limited admin access
  STAFF                                                      // Store staff with basic access
}

// Seller Profile - Business information for sellers
model SellerProfile {
  id           String      @id @default(cuid())              // Unique identifier for seller profile
  userId       String      @unique                           // Links to User model (one-to-one)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName String                                        // Official business name
  businessType String                                        // Type of business (e.g., "Retail", "Wholesale")
  description  String?                                       // Business description
  logo         String?                                       // Business logo URL
  banner       String?                                       // Business banner image URL
  themeId      String?                                       // Links to StoreTheme model
  theme        StoreTheme? @relation(fields: [themeId], references: [id])
  isVerified   Boolean     @default(false)                   // Whether business is verified by admin
  isActive     Boolean     @default(false)                   // Whether seller can operate (admin approval required)
  isApproved   Boolean     @default(false)                   // Whether admin has approved the seller
  approvalDate DateTime?                                      // When admin approved the seller
  approvedBy   String?                                        // Admin user ID who approved the seller
  createdAt    DateTime      @default(now())                 // When profile was created
  updatedAt    DateTime      @updatedAt                      // When profile was last updated

  // Relations - One-to-many relationships
  stores     Store[]                                         // All stores owned by this seller
  products   Product[]                                        // All products sold by this seller
  orders     Order[]                                          // All orders received by this seller
  categories Category[]                                       // All categories created by this seller
  storeMemberships StoreMember[]                              // All store memberships as co-owner/staff

  @@map("seller_profiles")                                   // Database table name
}

// Product Categories - Hierarchical product organization
model Category {
  id          String         @id @default(cuid())            // Unique identifier for category
  name        String                                         // Category name
  description String?                                        // Category description
  image       String?                                        // Category image URL
  parentId    String?                                        // Links to parent category (for hierarchy)
  parent      Category?      @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]     @relation("CategoryHierarchy")  // Sub-categories
  storeId     String?                                        // Optional: links to specific store
  store       Store?         @relation(fields: [storeId], references: [id])
  sellerId    String?                                        // Optional: links to specific seller
  seller      SellerProfile? @relation(fields: [sellerId], references: [id])
  isActive    Boolean        @default(true)                  // Whether category is active
  createdAt   DateTime       @default(now())                 // When category was created
  updatedAt   DateTime       @updatedAt                      // When category was last updated

  // Relations - One-to-many relationships
  products Product[]                                          // All products in this category

  @@map("categories")                                        // Database table name
}

// Products - Items available for purchase
model Product {
  id           String        @id @default(cuid())            // Unique identifier for product
  storeId      String                                        // Links to Store model (required)
  store        Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categoryId   String                                        // Links to Category model (required)
  category     Category      @relation(fields: [categoryId], references: [id])
  sellerId     String?                                       // Optional: links to specific seller
  seller       SellerProfile? @relation(fields: [sellerId], references: [id])
  name         String                                         // Product name
  description  String?                                        // Product description
  price        Decimal       @db.Decimal(10, 2)              // Current selling price
  comparePrice Decimal?      @db.Decimal(10, 2)              // Original/compare-at price
  cost         Decimal?      @db.Decimal(10, 2)              // Product cost for profit calculation
  sku          String?                                        // Stock keeping unit
  barcode      String?                                        // Product barcode
  weight       Float?                                         // Product weight
  dimensions   Json?                                          // Length, width, height (JSON format)
  images       Json                                           // Array of product image URLs (JSON format)
  isActive     Boolean       @default(true)                  // Whether product is available for purchase
  isFeatured   Boolean       @default(false)                 // Whether product is featured
  stock        Int           @default(0)                     // Current stock quantity
  minStock     Int           @default(0)                     // Minimum stock threshold
  maxStock     Int?                                           // Maximum stock capacity
  createdAt    DateTime      @default(now())                 // When product was created
  updatedAt    DateTime      @updatedAt                      // When product was last updated

  // Relations - One-to-many relationships
  orderItems OrderItem[]                                      // All order items containing this product
  reviews    Review[]                                         // All reviews for this product
  wishlist   WishlistItem[]                                   // All wishlist items for this product
  cart       CartItem[]                                       // All cart items for this product

  @@map("products")                                           // Database table name
}

// Shopping Cart - Items users want to purchase
model CartItem {
  id        String       @id @default(cuid())                // Unique identifier for cart item
  buyerId   String                                           // Links to BuyerProfile model
  buyer     BuyerProfile @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  productId String                                           // Links to Product model
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int                                              // Quantity of product in cart
  createdAt DateTime     @default(now())                     // When item was added to cart
  updatedAt DateTime     @updatedAt                          // When cart item was last updated

  @@unique([buyerId, productId])                             // One product per buyer in cart
  @@map("cart_items")                                        // Database table name
}

// Wishlist - Products users want to save for later
model WishlistItem {
  id        String       @id @default(cuid())                // Unique identifier for wishlist item
  buyerId   String                                           // Links to BuyerProfile model
  buyer     BuyerProfile @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  productId String                                           // Links to Product model
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())                     // When item was added to wishlist

  @@unique([buyerId, productId])                             // One product per buyer in wishlist
  @@map("wishlist_items")                                    // Database table name
}

// Orders - Customer purchases
model Order {
  id        String        @id @default(cuid())               // Unique identifier for order
  buyerId   String                                           // Links to User model (buyer)
  buyer     User          @relation(fields: [buyerId], references: [id])
  sellerId  String                                           // Links to SellerProfile model
  seller    SellerProfile @relation(fields: [sellerId], references: [id])
  status    OrderStatus   @default(PENDING)                  // Current order status
  total     Decimal       @db.Decimal(10, 2)                 // Total order amount
  subtotal  Decimal       @db.Decimal(10, 2)                 // Subtotal before tax/shipping
  tax       Decimal       @db.Decimal(10, 2)                 // Tax amount
  shipping  Decimal       @db.Decimal(10, 2)                 // Shipping cost
  discount  Decimal       @db.Decimal(10, 2)                 // Discount amount
  notes     String?                                           // Order notes
  createdAt DateTime       @default(now())                   // When order was created
  updatedAt DateTime       @updatedAt                        // When order was last updated

  // Relations - One-to-many relationships
  items             OrderItem[]                               // All items in this order
  shippingAddress   Address     @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String                                     // Links to shipping address

  @@map("orders")                                             // Database table name
}

// Order status progression
enum OrderStatus {
  PENDING                                                    // Order placed, waiting for confirmation
  CONFIRMED                                                  // Order confirmed by seller
  PROCESSING                                                 // Order being prepared
  SHIPPED                                                    // Order shipped to customer
  DELIVERED                                                  // Order delivered to customer
  CANCELLED                                                  // Order cancelled
  REFUNDED                                                   // Order refunded
}

// Order Items - Individual products within an order
model OrderItem {
  id        String   @id @default(cuid())                    // Unique identifier for order item
  orderId   String                                           // Links to Order model
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String                                           // Links to Product model
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int                                              // Quantity ordered
  price     Decimal  @db.Decimal(10, 2)                     // Price per unit at time of order
  total     Decimal  @db.Decimal(10, 2)                     // Total price for this item
  createdAt DateTime @default(now())                         // When order item was created

  @@map("order_items")                                       // Database table name
}

// Product Reviews - Customer feedback and ratings
model Review {
  id         String   @id @default(cuid())                   // Unique identifier for review
  buyerId    String                                           // Links to User model (buyer)
  buyer      User     @relation(fields: [buyerId], references: [id])
  productId  String                                           // Links to Product model
  product    Product  @relation(fields: [productId], references: [id])
  rating     Int                                              // Rating from 1-5 stars
  comment    String?                                          // Review text comment
  images     Json?                                            // Array of review image URLs (JSON format)
  isVerified Boolean  @default(false)                         // Whether review is verified (purchased product)
  createdAt  DateTime @default(now())                         // When review was created
  updatedAt  DateTime @updatedAt                              // When review was last updated

  @@unique([buyerId, productId])                             // One review per buyer per product
  @@map("reviews")                                            // Database table name
}

// Addresses - Shipping and billing addresses
model Address {
  id         String      @id @default(cuid())                // Unique identifier for address
  userId     String                                           // Links to User model
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       AddressType @default(SHIPPING)                  // Address type: shipping or billing
  name       String                                           // Recipient name
  phone      String                                           // Contact phone number
  address    String                                           // Street address
  city       String                                           // City
  state      String                                           // State/province
  country    String                                           // Country
  postalCode String                                           // ZIP/postal code
  isDefault  Boolean     @default(false)                      // Whether this is the default address
  createdAt  DateTime    @default(now())                      // When address was created
  updatedAt  DateTime    @updatedAt                           // When address was last updated

  // Relations - One-to-many relationships
  orders Order[]                                               // All orders using this address

  @@map("addresses")                                          // Database table name
}

// Address types
enum AddressType {
  SHIPPING                                                   // Delivery address
  BILLING                                                    // Billing address
}

// Admin Profile - Extended information for administrators
model AdminProfile {
  id          String   @id @default(cuid())                  // Unique identifier for admin profile
  userId      String   @unique                               // Links to User model (one-to-one)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions Json                                             // Admin permissions (JSON format)
  createdAt   DateTime @default(now())                        // When profile was created
  updatedAt   DateTime @updatedAt                             // When profile was last updated

  @@map("admin_profiles")                                    // Database table name
}

// Staff Profile - Extended information for staff members
model StaffProfile {
  id          String   @id @default(cuid())                  // Unique identifier for staff profile
  userId      String   @unique                               // Links to User model (one-to-one)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        String                                           // Staff role (e.g., "Support", "Moderator")
  permissions Json                                             // Staff permissions (JSON format)
  createdAt   DateTime @default(now())                        // When profile was created
  updatedAt   DateTime @updatedAt                             // When profile was last updated

  @@map("staff_profiles")                                    // Database table name
}

// Notifications - System and user notifications
model Notification {
  id        String   @id @default(cuid())                    // Unique identifier for notification
  userId    String                                           // Links to User model
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String                                           // Notification type (e.g., "Order", "Product", "System")
  title     String                                           // Notification title
  message   String                                           // Notification message
  isRead    Boolean  @default(false)                         // Whether notification has been read
  data      Json?                                            // Additional notification data (JSON format)
  createdAt DateTime @default(now())                         // When notification was created

  @@map("notifications")                                     // Database table name
}
