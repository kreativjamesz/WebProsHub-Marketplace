// This is your Prisma schema file for WebProsHubMarketplace
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// @seed = "tsx prisma/seed.ts"

// ============================================================================
// USER MODELS
// ============================================================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(BUYER)
  phone     String?
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyerProfile  BuyerProfile?
  sellerProfile SellerProfile?
  adminProfile  AdminProfile?
  staffProfile  StaffProfile?

  orders           Order[]
  reviews          Review[]
  addresses        Address[]
  notifications    Notification[]
  storeMemberships StoreMember[]

  @@map("users")
}

enum UserRole {
  BUYER
  SELLER
  ADMIN
  STAFF
}

model BuyerProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  birthDate   DateTime?
  preferences Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime @updatedAt

  wishlist WishlistItem[]
  cart     CartItem[]

  @@map("buyer_profiles")
}

model SellerProfile {
  id           String      @id @default(cuid())
  userId       String      @unique
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName String
  businessType String
  description  String?
  logo         String?
  banner       String?
  themeId      Int?
  theme        StoreTheme? @relation(fields: [themeId], references: [id])
  isVerified   Boolean     @default(false)
  isActive     Boolean     @default(false)
  isApproved   Boolean     @default(false)
  approvalDate DateTime?
  approvedBy   String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  stores           Store[]
  products         Product[]
  orders           Order[]
  storeMemberships StoreMember[]

  @@map("seller_profiles")
}

model AdminProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("admin_profiles")
}

model StaffProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        String
  permissions Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("staff_profiles")
}

// ============================================================================
// STORE MODELS
// ============================================================================

model StoreTheme {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  preview     String?
  css         String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sellers SellerProfile[]

  @@map("store_themes")
}

model Store {
  id           String   @id @default(cuid())
  name         String
  description  String?
  address      String
  city         String
  state        String
  country      String
  postalCode   String
  latitude     Float
  longitude    Float
  phone        String?
  email        String?
  website      String?
  openingHours Json?
  isActive     Boolean  @default(false)
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  products     Product[]
  storeMembers StoreMember[]

  sellerId String?
  seller   SellerProfile? @relation(fields: [sellerId], references: [id])

  @@map("stores")
}

model StoreMember {
  id        String         @id @default(cuid())
  storeId   String
  store     Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  userId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  sellerId  String?
  seller    SellerProfile? @relation(fields: [sellerId], references: [id])
  role      StoreRole      @default(STAFF)
  isActive  Boolean        @default(true)
  joinedAt  DateTime       @default(now())
  invitedBy String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([storeId, userId])
  @@map("store_members")
}

enum StoreRole {
  OWNER
  CO_OWNER
  MANAGER
  STAFF
}

// ============================================================================
// CATEGORY MODELS
// ============================================================================

model MainCategory {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categories Category[]
  products   Product[]

  @@map("main_categories")
}

model Category {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?
  image          String?
  mainCategoryId Int
  mainCategory   MainCategory @relation(fields: [mainCategoryId], references: [id], onDelete: Cascade)
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  subcategories Subcategory[]
  products      Product[]

  @@map("categories")
}

model Subcategory {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  image       String?
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products    Product[]

  @@map("subcategories")
}

// ============================================================================
// PRODUCT MODELS
// ============================================================================

model Product {
  id             String         @id @default(cuid())
  storeId        String
  store          Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  mainCategoryId Int?
  mainCategory   MainCategory?  @relation(fields: [mainCategoryId], references: [id])
  subcategoryId  Int?
  subcategory    Subcategory?   @relation(fields: [subcategoryId], references: [id])
  categoryId     Int?
  category       Category?      @relation(fields: [categoryId], references: [id])
  sellerId       String?
  seller         SellerProfile? @relation(fields: [sellerId], references: [id])
  name           String
  description    String?
  price          Decimal        @db.Decimal(10, 2)
  comparePrice   Decimal?       @db.Decimal(10, 2)
  cost           Decimal?       @db.Decimal(10, 2)
  sku            String?
  barcode        String?
  weight         Float?
  dimensions     Json?
  images         Json
  isActive       Boolean        @default(true)
  isFeatured     Boolean        @default(false)
  stock          Int            @default(0)
  minStock       Int            @default(0)
  maxStock       Int?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  orderItems OrderItem[]
  reviews    Review[]
  wishlist   WishlistItem[]
  cart       CartItem[]

  @@map("products")
}

model Review {
  id         String   @id @default(cuid())
  buyerId    String
  buyer      User     @relation(fields: [buyerId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  rating     Int
  comment    String?
  images     Json?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([buyerId, productId])
  @@map("reviews")
}

// ============================================================================
// ORDER MODELS
// ============================================================================

model Order {
  id        String        @id @default(cuid())
  buyerId   String
  buyer     User          @relation(fields: [buyerId], references: [id])
  sellerId  String
  seller    SellerProfile @relation(fields: [sellerId], references: [id])
  status    OrderStatus   @default(PENDING)
  total     Decimal       @db.Decimal(10, 2)
  subtotal  Decimal       @db.Decimal(10, 2)
  tax       Decimal       @db.Decimal(10, 2)
  shipping  Decimal       @db.Decimal(10, 2)
  discount  Decimal       @db.Decimal(10, 2)
  notes     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  items             OrderItem[]
  shippingAddress   Address     @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  @@map("order_items")
}

// ============================================================================
// SHOPPING MODELS
// ============================================================================

model CartItem {
  id        String       @id @default(cuid())
  buyerId   String
  buyer     BuyerProfile @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  productId String
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([buyerId, productId])
  @@map("cart_items")
}

model WishlistItem {
  id        String       @id @default(cuid())
  buyerId   String
  buyer     BuyerProfile @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  productId String
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())

  @@unique([buyerId, productId])
  @@map("wishlist_items")
}

// ============================================================================
// ADDRESS MODELS
// ============================================================================

model Address {
  id         String      @id @default(cuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       AddressType @default(SHIPPING)
  name       String
  phone      String
  address    String
  city       String
  state      String
  country    String
  postalCode String
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  orders Order[]

  @@map("addresses")
}

enum AddressType {
  SHIPPING
  BILLING
}

// ============================================================================
// NOTIFICATION MODELS
// ============================================================================

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())

  @@map("notifications")
}
